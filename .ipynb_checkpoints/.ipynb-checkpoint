{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-4Rm0wjQMUHi"
   },
   "source": [
    "# BUILDING A DEFUALT DETECTION MODEL\n",
    "\n",
    "---\n",
    "\n",
    "\n",
    "\n",
    "## Table of Contents\n",
    "1. Problem Description (Brief Write Up)\n",
    "2. Exploratory Data Analysis (EDA)\n",
    "3. Data Pre-processing\n",
    "4. Model Selection\n",
    "5. Evaluation\n",
    "6. Discussion and Possible Improvements\n",
    "\n",
    "## 1. Problem Description\n",
    "\n",
    "The data set we will be working on contains payment information of 30,000 credit card holders obtained from a bank in Taiwan. \n",
    "\n",
    "Each data sample is described by 23 feature attributes and a binary target feature (default or not) valued 0 (= not default) or 1 (= default). \n",
    "\n",
    "The 23 explanatory attributes and their explanations (from the data provider) are as follows:\n",
    "\n",
    "### X1 - X5: Indivual attributes of customer\n",
    "\n",
    "X1: Amount of the given credit (NT dollar): it includes both the individual consumer credit and his/her family (supplementary) credit. \n",
    "\n",
    "X2: Gender (1 = male; 2 = female). \n",
    "\n",
    "X3: Education (1 = graduate school; 2 = university; 3 = high school; 4 = others). \n",
    "\n",
    "X4: Marital status (1 = married; 2 = single; 3 = others). \n",
    "\n",
    "X5: Age (year). \n",
    "\n",
    "### X6 - X11: Repayment history from April to Septemeber 2005\n",
    "The measurement scale for the repayment status is: -1 = pay duly; 1 = payment delay for one month; 2 = payment delay for two months, . . . 8 = payment delay for eight months; 9 = payment delay for nine months and above.\n",
    "\n",
    "\n",
    "X6 = the repayment status in September, 2005\n",
    "\n",
    "X7 = the repayment status in August, 2005\n",
    "\n",
    "X8 = the repayment status in July, 2005\n",
    "\n",
    "X9 = the repayment status in June, 2005\n",
    "\n",
    "X10 = the repayment status in May, 2005\n",
    "\n",
    "X11 = the repayment status in April, 2005. \n",
    "\n",
    "### X12 - X17: Amount of bill statement (NT dollar) from April to September 2005\n",
    "\n",
    "X12 = amount of bill statement in September, 2005; \n",
    "\n",
    "X13 = amount of bill statement in August, 2005\n",
    "\n",
    ". . .\n",
    "\n",
    "X17 = amount of bill statement in April, 2005. \n",
    "\n",
    "### X18 - X23: Amount of previous payment (NT dollar)\n",
    "X18 = amount paid in September, 2005\n",
    "\n",
    "X19 = amount paid in August, 2005\n",
    "\n",
    ". . .\n",
    "\n",
    "X23 = amount paid in April, 2005. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "aM_aIU6UPHe4"
   },
   "source": [
    "## EDA\n",
    "\n",
    "In this section we will explore the data set, its shape and its features to get an idea of the data.\n",
    "\n",
    "### Importing packages and the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Is0wEkk3LJCt"
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "x_Z7u_9vRC5m"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "KhmX9KWWyrUW"
   },
   "outputs": [],
   "source": [
    "url = 'https://raw.githubusercontent.com/reonho/bt2101disrudy/master/card.csv'\n",
    "df = pd.read_csv(url,  header = 1, index_col = 0)\n",
    "# Dataset is now stored in a Pandas Dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 255
    },
    "colab_type": "code",
    "id": "FhJ2eAxVQhBm",
    "outputId": "7f79bb40-f08f-4709-e7d4-1f747bb8af2f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>MARRIAGE</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>PAY_5</th>\n",
       "      <th>...</th>\n",
       "      <th>BILL_AMT4</th>\n",
       "      <th>BILL_AMT5</th>\n",
       "      <th>BILL_AMT6</th>\n",
       "      <th>PAY_AMT1</th>\n",
       "      <th>PAY_AMT2</th>\n",
       "      <th>PAY_AMT3</th>\n",
       "      <th>PAY_AMT4</th>\n",
       "      <th>PAY_AMT5</th>\n",
       "      <th>PAY_AMT6</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>689</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>3272</td>\n",
       "      <td>3455</td>\n",
       "      <td>3261</td>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>14331</td>\n",
       "      <td>14948</td>\n",
       "      <td>15549</td>\n",
       "      <td>1518</td>\n",
       "      <td>1500</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>5000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>28314</td>\n",
       "      <td>28959</td>\n",
       "      <td>29547</td>\n",
       "      <td>2000</td>\n",
       "      <td>2019</td>\n",
       "      <td>1200</td>\n",
       "      <td>1100</td>\n",
       "      <td>1069</td>\n",
       "      <td>1000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>20940</td>\n",
       "      <td>19146</td>\n",
       "      <td>19131</td>\n",
       "      <td>2000</td>\n",
       "      <td>36681</td>\n",
       "      <td>10000</td>\n",
       "      <td>9000</td>\n",
       "      <td>689</td>\n",
       "      <td>679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  PAY_4  \\\n",
       "ID                                                                         \n",
       "1       20000    2          2         1   24      2      2     -1     -1   \n",
       "2      120000    2          2         2   26     -1      2      0      0   \n",
       "3       90000    2          2         2   34      0      0      0      0   \n",
       "4       50000    2          2         1   37      0      0      0      0   \n",
       "5       50000    1          2         1   57     -1      0     -1      0   \n",
       "\n",
       "    PAY_5  ...  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  PAY_AMT2  PAY_AMT3  \\\n",
       "ID         ...                                                                  \n",
       "1      -2  ...          0          0          0         0       689         0   \n",
       "2       0  ...       3272       3455       3261         0      1000      1000   \n",
       "3       0  ...      14331      14948      15549      1518      1500      1000   \n",
       "4       0  ...      28314      28959      29547      2000      2019      1200   \n",
       "5       0  ...      20940      19146      19131      2000     36681     10000   \n",
       "\n",
       "    PAY_AMT4  PAY_AMT5  PAY_AMT6  Y  \n",
       "ID                                   \n",
       "1          0         0         0  1  \n",
       "2       1000         0      2000  1  \n",
       "3       1000      1000      5000  0  \n",
       "4       1100      1069      1000  0  \n",
       "5       9000       689       679  0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#rename the target variable to \"Y\" for convenience\n",
    "df[\"Y\"] = df[\"default payment next month\"] \n",
    "df = df.drop(\"default payment next month\", axis = 1)\n",
    "df0 = df #backup of df\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "zcuPyfM86AKj",
    "outputId": "89bb2e37-a3ba-43e5-99a7-6917f24acc3f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data has 24 Columns and 30000 Rows\n"
     ]
    }
   ],
   "source": [
    "size = df.shape\n",
    "print(\"Data has {} Columns and {} Rows\".format(size[1], size[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "QVaSnvJP3VbO",
    "outputId": "4bf72e64-2d0c-41c3-85b5-3bd6e70920d3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for null values\n",
    "df.isnull().any().sum() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "eVYXnIGH9Zq6"
   },
   "source": [
    "There are no null values in the data.\n",
    "\n",
    "We can also calculate some summary statistics for each attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 317
    },
    "colab_type": "code",
    "id": "HgdgYfpR6hUM",
    "outputId": "0e6655d1-3872-448d-864b-786a54b7cf70"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>EDUCATION</th>\n",
       "      <th>MARRIAGE</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>PAY_5</th>\n",
       "      <th>...</th>\n",
       "      <th>BILL_AMT4</th>\n",
       "      <th>BILL_AMT5</th>\n",
       "      <th>BILL_AMT6</th>\n",
       "      <th>PAY_AMT1</th>\n",
       "      <th>PAY_AMT2</th>\n",
       "      <th>PAY_AMT3</th>\n",
       "      <th>PAY_AMT4</th>\n",
       "      <th>PAY_AMT5</th>\n",
       "      <th>PAY_AMT6</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>3.000000e+04</td>\n",
       "      <td>30000.00000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "      <td>30000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>167484.322667</td>\n",
       "      <td>1.603733</td>\n",
       "      <td>1.853133</td>\n",
       "      <td>1.551867</td>\n",
       "      <td>35.485500</td>\n",
       "      <td>-0.016700</td>\n",
       "      <td>-0.133767</td>\n",
       "      <td>-0.166200</td>\n",
       "      <td>-0.220667</td>\n",
       "      <td>-0.266200</td>\n",
       "      <td>...</td>\n",
       "      <td>43262.948967</td>\n",
       "      <td>40311.400967</td>\n",
       "      <td>38871.760400</td>\n",
       "      <td>5663.580500</td>\n",
       "      <td>5.921163e+03</td>\n",
       "      <td>5225.68150</td>\n",
       "      <td>4826.076867</td>\n",
       "      <td>4799.387633</td>\n",
       "      <td>5215.502567</td>\n",
       "      <td>0.221200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>129747.661567</td>\n",
       "      <td>0.489129</td>\n",
       "      <td>0.790349</td>\n",
       "      <td>0.521970</td>\n",
       "      <td>9.217904</td>\n",
       "      <td>1.123802</td>\n",
       "      <td>1.197186</td>\n",
       "      <td>1.196868</td>\n",
       "      <td>1.169139</td>\n",
       "      <td>1.133187</td>\n",
       "      <td>...</td>\n",
       "      <td>64332.856134</td>\n",
       "      <td>60797.155770</td>\n",
       "      <td>59554.107537</td>\n",
       "      <td>16563.280354</td>\n",
       "      <td>2.304087e+04</td>\n",
       "      <td>17606.96147</td>\n",
       "      <td>15666.159744</td>\n",
       "      <td>15278.305679</td>\n",
       "      <td>17777.465775</td>\n",
       "      <td>0.415062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>-170000.000000</td>\n",
       "      <td>-81334.000000</td>\n",
       "      <td>-339603.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2326.750000</td>\n",
       "      <td>1763.000000</td>\n",
       "      <td>1256.000000</td>\n",
       "      <td>1000.000000</td>\n",
       "      <td>8.330000e+02</td>\n",
       "      <td>390.00000</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>252.500000</td>\n",
       "      <td>117.750000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>140000.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>19052.000000</td>\n",
       "      <td>18104.500000</td>\n",
       "      <td>17071.000000</td>\n",
       "      <td>2100.000000</td>\n",
       "      <td>2.009000e+03</td>\n",
       "      <td>1800.00000</td>\n",
       "      <td>1500.000000</td>\n",
       "      <td>1500.000000</td>\n",
       "      <td>1500.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>240000.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>54506.000000</td>\n",
       "      <td>50190.500000</td>\n",
       "      <td>49198.250000</td>\n",
       "      <td>5006.000000</td>\n",
       "      <td>5.000000e+03</td>\n",
       "      <td>4505.00000</td>\n",
       "      <td>4013.250000</td>\n",
       "      <td>4031.500000</td>\n",
       "      <td>4000.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>891586.000000</td>\n",
       "      <td>927171.000000</td>\n",
       "      <td>961664.000000</td>\n",
       "      <td>873552.000000</td>\n",
       "      <td>1.684259e+06</td>\n",
       "      <td>896040.00000</td>\n",
       "      <td>621000.000000</td>\n",
       "      <td>426529.000000</td>\n",
       "      <td>528666.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            LIMIT_BAL           SEX     EDUCATION      MARRIAGE           AGE  \\\n",
       "count    30000.000000  30000.000000  30000.000000  30000.000000  30000.000000   \n",
       "mean    167484.322667      1.603733      1.853133      1.551867     35.485500   \n",
       "std     129747.661567      0.489129      0.790349      0.521970      9.217904   \n",
       "min      10000.000000      1.000000      0.000000      0.000000     21.000000   \n",
       "25%      50000.000000      1.000000      1.000000      1.000000     28.000000   \n",
       "50%     140000.000000      2.000000      2.000000      2.000000     34.000000   \n",
       "75%     240000.000000      2.000000      2.000000      2.000000     41.000000   \n",
       "max    1000000.000000      2.000000      6.000000      3.000000     79.000000   \n",
       "\n",
       "              PAY_0         PAY_2         PAY_3         PAY_4         PAY_5  \\\n",
       "count  30000.000000  30000.000000  30000.000000  30000.000000  30000.000000   \n",
       "mean      -0.016700     -0.133767     -0.166200     -0.220667     -0.266200   \n",
       "std        1.123802      1.197186      1.196868      1.169139      1.133187   \n",
       "min       -2.000000     -2.000000     -2.000000     -2.000000     -2.000000   \n",
       "25%       -1.000000     -1.000000     -1.000000     -1.000000     -1.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "75%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "max        8.000000      8.000000      8.000000      8.000000      8.000000   \n",
       "\n",
       "       ...      BILL_AMT4      BILL_AMT5      BILL_AMT6       PAY_AMT1  \\\n",
       "count  ...   30000.000000   30000.000000   30000.000000   30000.000000   \n",
       "mean   ...   43262.948967   40311.400967   38871.760400    5663.580500   \n",
       "std    ...   64332.856134   60797.155770   59554.107537   16563.280354   \n",
       "min    ... -170000.000000  -81334.000000 -339603.000000       0.000000   \n",
       "25%    ...    2326.750000    1763.000000    1256.000000    1000.000000   \n",
       "50%    ...   19052.000000   18104.500000   17071.000000    2100.000000   \n",
       "75%    ...   54506.000000   50190.500000   49198.250000    5006.000000   \n",
       "max    ...  891586.000000  927171.000000  961664.000000  873552.000000   \n",
       "\n",
       "           PAY_AMT2      PAY_AMT3       PAY_AMT4       PAY_AMT5  \\\n",
       "count  3.000000e+04   30000.00000   30000.000000   30000.000000   \n",
       "mean   5.921163e+03    5225.68150    4826.076867    4799.387633   \n",
       "std    2.304087e+04   17606.96147   15666.159744   15278.305679   \n",
       "min    0.000000e+00       0.00000       0.000000       0.000000   \n",
       "25%    8.330000e+02     390.00000     296.000000     252.500000   \n",
       "50%    2.009000e+03    1800.00000    1500.000000    1500.000000   \n",
       "75%    5.000000e+03    4505.00000    4013.250000    4031.500000   \n",
       "max    1.684259e+06  896040.00000  621000.000000  426529.000000   \n",
       "\n",
       "            PAY_AMT6             Y  \n",
       "count   30000.000000  30000.000000  \n",
       "mean     5215.502567      0.221200  \n",
       "std     17777.465775      0.415062  \n",
       "min         0.000000      0.000000  \n",
       "25%       117.750000      0.000000  \n",
       "50%      1500.000000      0.000000  \n",
       "75%      4000.000000      0.000000  \n",
       "max    528666.000000      1.000000  \n",
       "\n",
       "[8 rows x 24 columns]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "W6hhPNl1Slau"
   },
   "source": [
    "### Exploring the features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "1Sp2F3gzXX2F"
   },
   "source": [
    "**1) Exploring target attribute:**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "DCSEICWwXWgX",
    "outputId": "9545da56-f31b-48f2-a271-db0e18677beb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "defaults : 22.12 %\n",
      "non defaults : 77.88000000000001 %\n"
     ]
    }
   ],
   "source": [
    "All = df.shape[0]\n",
    "default = df[df['Y'] == 1]\n",
    "nondefault = df[df['Y'] == 0]\n",
    "\n",
    "x = len(default)/All\n",
    "y = len(nondefault)/All\n",
    "\n",
    "print('defaults :',x*100,'%')\n",
    "print('non defaults :',y*100,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 312
    },
    "colab_type": "code",
    "id": "W4TWo-gkYTql",
    "outputId": "0f7d6129-f6f2-448a-9236-9f9ef7ae1bb4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Frequency')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting target attribute against frequency\n",
    "labels = ['non default','default']\n",
    "classes = pd.value_counts(df['Y'], sort = True)\n",
    "classes.plot(kind = 'bar', rot=0)\n",
    "plt.title(\"Target attribute distribution\")\n",
    "plt.xticks(range(2), labels)\n",
    "plt.xlabel(\"Class\")\n",
    "plt.ylabel(\"Frequency\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "tysR0WHw4SGU"
   },
   "source": [
    "**2) Exploring categorical attributes**\n",
    "\n",
    "Categorical attributes are:\n",
    "- Sex\n",
    "- Education\n",
    "- Marriage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "oxsZ8GTGarMC"
   },
   "source": [
    "**2a) Checking formatting for categorical attributes:**\n",
    "\n",
    "Since all categorical attributes are in numerical format, there is no need to convert them into numerical factors."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "TSiH-BxjyJ_e"
   },
   "source": [
    "**2b) Analysis of categorical data groups**\n",
    "\n",
    "- Sex\n",
    "- Education\n",
    "- Marriage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 323
    },
    "colab_type": "code",
    "id": "s61SSRII00UB",
    "outputId": "69df981f-8c36-43a9-d155-a6553adbba0b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2    60.373333\n",
      "1    39.626667\n",
      "Name: SEX, dtype: float64\n",
      "--------------------------------------------------------\n",
      "2    46.766667\n",
      "1    35.283333\n",
      "3    16.390000\n",
      "5     0.933333\n",
      "4     0.410000\n",
      "6     0.170000\n",
      "0     0.046667\n",
      "Name: EDUCATION, dtype: float64\n",
      "--------------------------------------------------------\n",
      "2    53.213333\n",
      "1    45.530000\n",
      "3     1.076667\n",
      "0     0.180000\n",
      "Name: MARRIAGE, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(df[\"SEX\"].value_counts().apply(lambda r: r/All*100))\n",
    "print(\"--------------------------------------------------------\")\n",
    "print(df[\"EDUCATION\"].value_counts().apply(lambda r: r/All*100))\n",
    "print(\"--------------------------------------------------------\")\n",
    "print(df[\"MARRIAGE\"].value_counts().apply(lambda r: r/All*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Uudv5XE828nb"
   },
   "source": [
    "**Conclusion**\n",
    "\n",
    "- Categorical variable SEX does not seem to have any missing/extra groups, and it is separated into Male = 1 and Female = 2\n",
    "- Categorical variable MARRIAGE seems to have unknown group = 0, which could be assumed to be missing data, with other groups being Married = 1, Single = 2, Others = 3\n",
    "- Categorical variable EDUCATION seems to have unknown group = 0,5,6, with other groups being graduate school = 1, university = 2, high school = 3, others = 4 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Z92LGXPKetjL"
   },
   "source": [
    "**2c) Analysing the relationship between categorical attributes and default payment (target attribute)**\n",
    "\n",
    "- Sex\n",
    "- Education\n",
    "- Marriage\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 357
    },
    "colab_type": "code",
    "id": "U3IJzhwwe5KK",
    "outputId": "cb61e112-a3ec-4a37-c1a0-0ffc9ebcbf89"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total target attributes:\n",
      "non defaults : 77.88000000000001 %\n",
      "defaults : 22.12 %\n",
      "--------------------------------------------------------\n",
      "SEX                Male    Female      4\n",
      "Y                                       \n",
      "non defaults  75.654762  79.06119    0.0\n",
      "defaults      24.345238  20.93881    0.0\n",
      "4              0.000000   0.00000  100.0\n",
      "--------------------------------------------------------\n",
      "EDUCATION             1          2          3          4\n",
      "Y                                                       \n",
      "non defaults  80.765234  76.265146  74.842384  24.786325\n",
      "defaults      19.234766  23.734854  25.157616   1.495726\n",
      "4              0.000000   0.000000   0.000000  73.717949\n",
      "--------------------------------------------------------\n",
      "MARRIAGE        unknown    married     single     others      4\n",
      "Y                                                              \n",
      "non defaults  90.740741  76.315204  78.938378  73.584906    0.0\n",
      "defaults       9.259259  23.684796  21.061622  26.415094    0.0\n",
      "4              0.000000   0.000000   0.000000   0.000000  100.0\n"
     ]
    }
   ],
   "source": [
    "#proportion of target attribute (for reference)\n",
    "print('Total target attributes:')\n",
    "print('non defaults :',y*100,'%')\n",
    "print('defaults :',x*100,'%')\n",
    "print(\"--------------------------------------------------------\")\n",
    "#analysing default payment with Sex\n",
    "sex_target = pd.crosstab(df[\"Y\"], df[\"SEX\"]).apply(lambda r: r/r.sum()*100).rename(columns = {1: \"Male\", 2: \"Female\"}, index = {0: \"non defaults\", 1: \"defaults\"})\n",
    "print(sex_target)\n",
    "print(\"--------------------------------------------------------\")\n",
    "#analysing default payment with education\n",
    "education_target = pd.crosstab(df[\"Y\"], df[\"EDUCATION\"]).apply(lambda r: r/r.sum()*100).rename(index = {0: \"non defaults\", 1: \"defaults\"})\n",
    "print(education_target)\n",
    "print(\"--------------------------------------------------------\")\n",
    "#analysing default payment with marriage\n",
    "marriage_target = pd.crosstab(df[\"Y\"], df[\"MARRIAGE\"]).apply(lambda r: r/r.sum()*100).rename(columns = {0: \"unknown\",1: \"married\", 2: \"single\", 3: \"others\"},index = {0: \"non defaults\", 1: \"defaults\"})\n",
    "print(marriage_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "id": "apWUtjyHPWcE",
    "outputId": "a7e40c77-64d1-4ef3-f31c-b7d1b7f24878"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SEX: 0.6854422910010494\n",
      "EDUCATION: 1.0276815835411287e-08 *** [Significant at the 95% Level]\n",
      "MARRIAGE: 0.016161318279331434 *** [Significant at the 95% Level]\n"
     ]
    }
   ],
   "source": [
    "# we would like to conduct a chi square test of independence using the contingency tables above\n",
    "import scipy.stats as sp_stat\n",
    "\n",
    "def sigf(p, confidence):\n",
    "  return str(p) + \" *** [Significant at the \" + str(int(confidence*100)) + \"% Level]\" if p < 1-confidence else p\n",
    "\n",
    "#print the p values for the test statistic of each chi-sq test\n",
    "print(\"SEX:\", sigf(sp_stat.chi2_contingency(sex_target)[1], 0.95))\n",
    "print(\"EDUCATION:\", sigf(sp_stat.chi2_contingency(education_target)[1],0.95))\n",
    "print(\"MARRIAGE:\", sigf(sp_stat.chi2_contingency(marriage_target)[1],0.95))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "kOriUQ0wxbhD"
   },
   "source": [
    "**Conclusion**\n",
    "\n",
    "Categorical attributes EDUCATION and MARRIAGE are associated with the target variable.\n",
    "\n",
    "We will probably omit SEX from our models as it is statistically insignificant.\n",
    "\n",
    "Categorical attributes SEX and MARRIAGE have approximately uniform distributions throughout categories."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "77GAylGWnPJO"
   },
   "source": [
    "**3) Analysis of Numerical Attributes**\n",
    "\n",
    "The numerical attributes are:\n",
    "   \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 669
    },
    "colab_type": "code",
    "id": "HEcCl5Rj-N0T",
    "outputId": "a59f7092-366e-47ec-c67b-e18f02d84ac4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>LIMIT_BAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>AGE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>PAY_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>PAY_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>PAY_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>PAY_4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>PAY_5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>PAY_6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>BILL_AMT1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>BILL_AMT2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>BILL_AMT3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>BILL_AMT4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>BILL_AMT5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>BILL_AMT6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>PAY_AMT1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>PAY_AMT2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>PAY_AMT3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>PAY_AMT4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>PAY_AMT5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>PAY_AMT6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            0\n",
       "0   LIMIT_BAL\n",
       "1         AGE\n",
       "2       PAY_0\n",
       "3       PAY_2\n",
       "4       PAY_3\n",
       "5       PAY_4\n",
       "6       PAY_5\n",
       "7       PAY_6\n",
       "8   BILL_AMT1\n",
       "9   BILL_AMT2\n",
       "10  BILL_AMT3\n",
       "11  BILL_AMT4\n",
       "12  BILL_AMT5\n",
       "13  BILL_AMT6\n",
       "14   PAY_AMT1\n",
       "15   PAY_AMT2\n",
       "16   PAY_AMT3\n",
       "17   PAY_AMT4\n",
       "18   PAY_AMT5\n",
       "19   PAY_AMT6"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#printing numerical attributes\n",
    "pd.DataFrame(df.drop(['SEX', 'EDUCATION', 'MARRIAGE','Y'], axis = 1).columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EUl9bX7k_nxw"
   },
   "source": [
    "**3a) Limit Balance**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 170
    },
    "colab_type": "code",
    "id": "Csm29blenaJT",
    "outputId": "e84fd570-639f-4a4b-a57f-af2d000d6730"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count      30000.000000\n",
      "mean      167484.322667\n",
      "std       129747.661567\n",
      "min        10000.000000\n",
      "25%        50000.000000\n",
      "50%       140000.000000\n",
      "75%       240000.000000\n",
      "max      1000000.000000\n",
      "Name: LIMIT_BAL, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#Find out min and max value of LIMIT BALANCE\n",
    "print(df[\"LIMIT_BAL\"].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 313
    },
    "colab_type": "code",
    "id": "eHrdunFN7Sj0",
    "outputId": "1c087f10-d56c-493a-8f44-45f6c685b8d4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of Limit Balance')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df[\"LIMIT_BAL\"]).set_title('Distribution of Limit Balance')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xlDZf8ru7Xp6"
   },
   "source": [
    "**3b) Analysis of Age**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 300
    },
    "colab_type": "code",
    "id": "Iwal1Lhb6ryG",
    "outputId": "b4f48898-27c5-4455-d8d1-9e344f3ddb7d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x22961378198>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df.AGE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3c) Rest of the Attributes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              PAY_0         PAY_2         PAY_3         PAY_4         PAY_5  \\\n",
      "count  30000.000000  30000.000000  30000.000000  30000.000000  30000.000000   \n",
      "mean      -0.016700     -0.133767     -0.166200     -0.220667     -0.266200   \n",
      "std        1.123802      1.197186      1.196868      1.169139      1.133187   \n",
      "min       -2.000000     -2.000000     -2.000000     -2.000000     -2.000000   \n",
      "25%       -1.000000     -1.000000     -1.000000     -1.000000     -1.000000   \n",
      "50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "75%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "max        8.000000      8.000000      8.000000      8.000000      8.000000   \n",
      "\n",
      "              PAY_6      BILL_AMT1      BILL_AMT2     BILL_AMT3  \\\n",
      "count  30000.000000   30000.000000   30000.000000  3.000000e+04   \n",
      "mean      -0.291100   51223.330900   49179.075167  4.701315e+04   \n",
      "std        1.149988   73635.860576   71173.768783  6.934939e+04   \n",
      "min       -2.000000 -165580.000000  -69777.000000 -1.572640e+05   \n",
      "25%       -1.000000    3558.750000    2984.750000  2.666250e+03   \n",
      "50%        0.000000   22381.500000   21200.000000  2.008850e+04   \n",
      "75%        0.000000   67091.000000   64006.250000  6.016475e+04   \n",
      "max        8.000000  964511.000000  983931.000000  1.664089e+06   \n",
      "\n",
      "           BILL_AMT4      BILL_AMT5      BILL_AMT6       PAY_AMT1  \\\n",
      "count   30000.000000   30000.000000   30000.000000   30000.000000   \n",
      "mean    43262.948967   40311.400967   38871.760400    5663.580500   \n",
      "std     64332.856134   60797.155770   59554.107537   16563.280354   \n",
      "min   -170000.000000  -81334.000000 -339603.000000       0.000000   \n",
      "25%      2326.750000    1763.000000    1256.000000    1000.000000   \n",
      "50%     19052.000000   18104.500000   17071.000000    2100.000000   \n",
      "75%     54506.000000   50190.500000   49198.250000    5006.000000   \n",
      "max    891586.000000  927171.000000  961664.000000  873552.000000   \n",
      "\n",
      "           PAY_AMT2      PAY_AMT3       PAY_AMT4       PAY_AMT5       PAY_AMT6  \n",
      "count  3.000000e+04   30000.00000   30000.000000   30000.000000   30000.000000  \n",
      "mean   5.921163e+03    5225.68150    4826.076867    4799.387633    5215.502567  \n",
      "std    2.304087e+04   17606.96147   15666.159744   15278.305679   17777.465775  \n",
      "min    0.000000e+00       0.00000       0.000000       0.000000       0.000000  \n",
      "25%    8.330000e+02     390.00000     296.000000     252.500000     117.750000  \n",
      "50%    2.009000e+03    1800.00000    1500.000000    1500.000000    1500.000000  \n",
      "75%    5.000000e+03    4505.00000    4013.250000    4031.500000    4000.000000  \n",
      "max    1.684259e+06  896040.00000  621000.000000  426529.000000  528666.000000  \n"
     ]
    }
   ],
   "source": [
    "print(df.drop(['LIMIT_BAL', 'AGE','SEX', 'EDUCATION', 'MARRIAGE','Y'], axis=1).describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Meaning of attributes PAY_0 to PAY_6**\n",
    "\n",
    "We observe that the minimum value of PAY_0 to PAY_6 is -2. The dataset's author has explained these factors as the number of months of payment delay, that is, 1= payment delay of one month; 2= payment delay of two months and so on.\n",
    "\n",
    "However, the presence of -2, -1 in these columns mean we must conduct some data transformation to use these columns as the months of payment delay.\n",
    "\n",
    "According to **(link)**, the numeric value in these attributes shows the past history of a credit card holder, where -2 means: No consumption of credit card, -1 means that holder paid the full balance, and 0 means the use of revolving credit.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3d) Relationships with Target**\n",
    "\n",
    "To find out the relationships between the features, we calculate the absolute value of R with the target for all attributes. (R = Correlation Coefficient)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 669
    },
    "colab_type": "code",
    "id": "awXnqvLOS-wB",
    "outputId": "a77b53b8-011e-4f53-b7b7-20d80bbc1777"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>PAY_0</td>\n",
       "      <td>0.324794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_2</td>\n",
       "      <td>0.263551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_3</td>\n",
       "      <td>0.235253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_4</td>\n",
       "      <td>0.216614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_5</td>\n",
       "      <td>0.204149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_6</td>\n",
       "      <td>0.186866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>LIMIT_BAL</td>\n",
       "      <td>0.153520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_AMT1</td>\n",
       "      <td>0.072929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_AMT2</td>\n",
       "      <td>0.058579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_AMT4</td>\n",
       "      <td>0.056827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_AMT3</td>\n",
       "      <td>0.056250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_AMT5</td>\n",
       "      <td>0.055124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>PAY_AMT6</td>\n",
       "      <td>0.053183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BILL_AMT1</td>\n",
       "      <td>0.019644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BILL_AMT2</td>\n",
       "      <td>0.014193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BILL_AMT3</td>\n",
       "      <td>0.014076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>AGE</td>\n",
       "      <td>0.013890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BILL_AMT4</td>\n",
       "      <td>0.010156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BILL_AMT5</td>\n",
       "      <td>0.006760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>BILL_AMT6</td>\n",
       "      <td>0.005372</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  0\n",
       "PAY_0      0.324794\n",
       "PAY_2      0.263551\n",
       "PAY_3      0.235253\n",
       "PAY_4      0.216614\n",
       "PAY_5      0.204149\n",
       "PAY_6      0.186866\n",
       "LIMIT_BAL  0.153520\n",
       "PAY_AMT1   0.072929\n",
       "PAY_AMT2   0.058579\n",
       "PAY_AMT4   0.056827\n",
       "PAY_AMT3   0.056250\n",
       "PAY_AMT5   0.055124\n",
       "PAY_AMT6   0.053183\n",
       "BILL_AMT1  0.019644\n",
       "BILL_AMT2  0.014193\n",
       "BILL_AMT3  0.014076\n",
       "AGE        0.013890\n",
       "BILL_AMT4  0.010156\n",
       "BILL_AMT5  0.006760\n",
       "BILL_AMT6  0.005372"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#absolute correlation coefficient\n",
    "pd.DataFrame(df.drop(['SEX', 'EDUCATION', 'MARRIAGE','Y'], axis=1).apply(lambda x: x.corr(df.Y) if x.corr(df.Y) > 0 else -x.corr(df.Y)).sort_values(ascending = False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "C6c_Gz6wUrJ8"
   },
   "source": [
    "We observe that the \"repayment status\" attributes are the most highly correlated with the target variable and we would expect them to be more significant in predicting credit default. In fact the later the status (pay_0 is later than pay_6), the more correlated it is.\n",
    "\n",
    "The least correlated attributes are the bill amounts.\n",
    "\n",
    "We can also generate a correlation matrix (heatmap) to see which features are the most correlated with each other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 964
    },
    "colab_type": "code",
    "id": "C2Mg6Zi_Q_rf",
    "outputId": "a06ab39f-82c5-43a7-cc4f-a267b2a967f9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.05, 'Correlation Matrix')"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1368x1080 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f = plt.figure(figsize=(19, 15))\n",
    "plt.matshow(df.corr(), fignum=f.number)\n",
    "plt.xticks(range(df.shape[1]), df.columns, fontsize=14, rotation=45)\n",
    "plt.yticks(range(df.shape[1]), df.columns, fontsize=14)\n",
    "cb = plt.colorbar()\n",
    "cb.ax.tick_params(labelsize=14)\n",
    "plt.title('Correlation Matrix', fontsize=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gXQQgn7kU0Uc"
   },
   "source": [
    "The heatmap reveals that the payment and billed amounts across the 5 months are highly correlated with each other.  Highly Correlated factors should be removed before carrying out any regression to prevent multicollinearity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "AQBksEyEf4Sf"
   },
   "source": [
    "## Data Preprocessing\n",
    "It was previously mentioned that our data had a bit of noise. In this part we will clean up the data so that it can be correctly applied to ML models."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "AG82bczx53gl"
   },
   "source": [
    "???\n",
    "1. get rid of unknown attributes\n",
    "2. One-hot encoding\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing Noise\n",
    "#### Inconsistency\n",
    "First, we found in our data exploration that education has unknown groups 0, 5 and 6. These will be replaced with Education = Others, which has value 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 1, 3, 4], dtype=int64)"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['EDUCATION'].replace([0,5,6], 4, regex=True, inplace=True)\n",
    "df[\"EDUCATION\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 0], dtype=int64)"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"MARRIAGE\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Second, we are going to extract the negative values of PAY_0 to PAY_6 as another categorical feature. This way, PAY_0 to PAY_6 can be thought of purely as the months of delay of payments.\n",
    "\n",
    "The negative values will form a categorical variable. e.g. negative values of PAY_0 will form the categorical variable S_0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(0,7):\n",
    "    try:\n",
    "        df[\"S_\" + str(i)] = [x  if x < 1 else 1 for x in df[\"PAY_\" + str(i)]]\n",
    "    except:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S_0</th>\n",
       "      <th>S_2</th>\n",
       "      <th>S_3</th>\n",
       "      <th>S_4</th>\n",
       "      <th>S_5</th>\n",
       "      <th>S_6</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-2</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    S_0  S_2  S_3  S_4  S_5  S_6\n",
       "ID                              \n",
       "1     1    1   -1   -1   -2   -2\n",
       "2    -1    1    0    0    0    1\n",
       "3     0    0    0    0    0    0\n",
       "4     0    0    0    0    0    0\n",
       "5    -1    0   -1    0    0    0"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"S_0\", \"S_2\", \"S_3\", \"S_4\", \"S_5\", \"S_6\"]].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              PAY_0         PAY_2         PAY_3         PAY_4        PAY_5  \\\n",
      "count  30000.000000  30000.000000  30000.000000  30000.000000  30000.00000   \n",
      "mean       0.356767      0.320033      0.304067      0.258767      0.22150   \n",
      "std        0.760594      0.801727      0.790589      0.761113      0.71772   \n",
      "min        0.000000      0.000000      0.000000      0.000000      0.00000   \n",
      "25%        0.000000      0.000000      0.000000      0.000000      0.00000   \n",
      "50%        0.000000      0.000000      0.000000      0.000000      0.00000   \n",
      "75%        0.000000      0.000000      0.000000      0.000000      0.00000   \n",
      "max        8.000000      8.000000      8.000000      8.000000      8.00000   \n",
      "\n",
      "              PAY_6  \n",
      "count  30000.000000  \n",
      "mean       0.226567  \n",
      "std        0.715438  \n",
      "min        0.000000  \n",
      "25%        0.000000  \n",
      "50%        0.000000  \n",
      "75%        0.000000  \n",
      "max        8.000000  \n"
     ]
    }
   ],
   "source": [
    "for col in [\"PAY_0\", \"PAY_2\", \"PAY_3\", \"PAY_4\", \"PAY_5\", \"PAY_6\"]:\n",
    "    df[col].replace([0,-1,-2], 0, regex=True, inplace=True)\n",
    "\n",
    "print(df[[\"PAY_0\", \"PAY_2\", \"PAY_3\", \"PAY_4\", \"PAY_5\", \"PAY_6\"]].describe())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Outliers\n",
    "Next, we would like to remove outliers from the continuous variables. Assuming that all the data points are normally distributed, we will consider a point an outlier if it falls outside the 99% interval of a distribution. (Critical value = 2.58) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "#KIV might not be useful\n",
    "from scipy import stats\n",
    "#we are only concerned with the ordinal data\n",
    "o = pd.DataFrame(df.drop([], axis=1))\n",
    "#rows where the absolute z score of all columns are less than 2.58 (critical value)\n",
    "rows = (np.abs(stats.zscore(o)) < 2.58).all(axis=1)\n",
    "df = df[rows]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              PAY_0         PAY_2         PAY_3         PAY_4         PAY_5  \\\n",
      "count  24440.000000  24440.000000  24440.000000  24440.000000  24440.000000   \n",
      "mean       0.301187      0.253642      0.240016      0.197913      0.166367   \n",
      "std        0.620976      0.664974      0.649893      0.597186      0.552329   \n",
      "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "25%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "50%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "75%        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
      "max        2.000000      2.000000      2.000000      2.000000      2.000000   \n",
      "\n",
      "              PAY_6  \n",
      "count  24440.000000  \n",
      "mean       0.176514  \n",
      "std        0.567348  \n",
      "min        0.000000  \n",
      "25%        0.000000  \n",
      "50%        0.000000  \n",
      "75%        0.000000  \n",
      "max        2.000000  \n"
     ]
    }
   ],
   "source": [
    "print(df[[\"PAY_0\", \"PAY_2\", \"PAY_3\", \"PAY_4\", \"PAY_5\", \"PAY_6\"]].describe())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### One-Hot Encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In some models, categorical variables which are encoded numerically will be erroneously treated as ordinal data. To understand why this is a problem, consider the \"Education\" column for our dataset.\n",
    "\n",
    "A logistic regression model, for example, will assume that the difference in odds of default between education = 1 and education = 2 is the same as the difference between education = 2 and 3. This is wrong because the difference in odds between a graduate degree and university (1 and 2) is likely to be different from that between univeristy education and high school education (2 and 3).\n",
    "\n",
    "One hot encoding will allow our models to treat these columns explicitly as categorical features.\n",
    "\n",
    "The following categorical columns will be one-hot encoded\n",
    "1. MARRIAGE\n",
    "2. EDUCATION\n",
    "3. S_0 to S_6 (ex. S_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "onenc = OneHotEncoder(categories='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    0    1    2    3    4    5    6    7    8    9   ...   19   20   21   22  \\\n",
       "0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0  0.0  ...  0.0  0.0  1.0  0.0   \n",
       "1  0.0  1.0  0.0  0.0  1.0  0.0  1.0  0.0  0.0  0.0  ...  1.0  0.0  0.0  0.0   \n",
       "2  0.0  1.0  0.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  ...  1.0  0.0  0.0  0.0   \n",
       "3  0.0  1.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  ...  1.0  0.0  0.0  0.0   \n",
       "4  0.0  1.0  0.0  1.0  0.0  0.0  1.0  0.0  0.0  0.0  ...  1.0  0.0  0.0  0.0   \n",
       "\n",
       "    23   24   25   26   27   28  \n",
       "0  0.0  0.0  1.0  0.0  0.0  0.0  \n",
       "1  1.0  0.0  0.0  0.0  0.0  1.0  \n",
       "2  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "3  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "4  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "onehot = pd.DataFrame(onenc.fit_transform(df[['EDUCATION', 'MARRIAGE',\"S_0\", \"S_2\", \"S_3\", \"S_4\", \"S_5\", \"S_6\"]]).toarray())\n",
    "onehot.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LIMIT_BAL</th>\n",
       "      <th>SEX</th>\n",
       "      <th>AGE</th>\n",
       "      <th>PAY_0</th>\n",
       "      <th>PAY_2</th>\n",
       "      <th>PAY_3</th>\n",
       "      <th>PAY_4</th>\n",
       "      <th>PAY_5</th>\n",
       "      <th>PAY_6</th>\n",
       "      <th>BILL_AMT1</th>\n",
       "      <th>...</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>20000</td>\n",
       "      <td>2</td>\n",
       "      <td>24</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3913</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>120000</td>\n",
       "      <td>2</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2682</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>29239</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>50000</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>46990</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8617</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24435</td>\n",
       "      <td>10000</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8802</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24436</td>\n",
       "      <td>80000</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>72557</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24437</td>\n",
       "      <td>220000</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>188948</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24438</td>\n",
       "      <td>150000</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1683</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>24439</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>47929</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>24440 rows Ã— 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       LIMIT_BAL  SEX  AGE  PAY_0  PAY_2  PAY_3  PAY_4  PAY_5  PAY_6  \\\n",
       "0          20000    2   24      2      2      0      0      0      0   \n",
       "1         120000    2   26      0      2      0      0      0      2   \n",
       "2          90000    2   34      0      0      0      0      0      0   \n",
       "3          50000    2   37      0      0      0      0      0      0   \n",
       "4          50000    1   57      0      0      0      0      0      0   \n",
       "...          ...  ...  ...    ...    ...    ...    ...    ...    ...   \n",
       "24435      10000    1   43      0      0      0      0      0      0   \n",
       "24436      80000    1   34      2      2      2      2      2      2   \n",
       "24437     220000    1   39      0      0      0      0      0      0   \n",
       "24438     150000    1   43      0      0      0      0      0      0   \n",
       "24439      50000    1   46      0      0      0      0      0      0   \n",
       "\n",
       "       BILL_AMT1  ...   19   20   21   22   23   24   25   26   27   28  \n",
       "0           3913  ...  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  \n",
       "1           2682  ...  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  0.0  1.0  \n",
       "2          29239  ...  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "3          46990  ...  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "4           8617  ...  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "...          ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  \n",
       "24435       8802  ...  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  \n",
       "24436      72557  ...  0.0  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  \n",
       "24437     188948  ...  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "24438       1683  ...  0.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "24439      47929  ...  1.0  0.0  0.0  0.0  1.0  0.0  0.0  0.0  1.0  0.0  \n",
       "\n",
       "[24440 rows x 51 columns]"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = df.drop(['EDUCATION', 'MARRIAGE',\"S_0\", \"S_2\", \"S_3\", \"S_4\", \"S_5\", \"S_6\"], axis = 1)\n",
    "df1 = pd.concat([df1.reset_index(drop=True), onehot], axis=1)\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['x0_1', 'x0_2', 'x0_3', 'x1_1', 'x1_2', 'x2_-2', 'x2_-1', 'x2_0',\n",
       "       'x2_1', 'x3_-2', 'x3_-1', 'x3_0', 'x3_1', 'x4_-2', 'x4_-1', 'x4_0',\n",
       "       'x4_1', 'x5_-2', 'x5_-1', 'x5_0', 'x5_1', 'x6_-2', 'x6_-1', 'x6_0',\n",
       "       'x6_1', 'x7_-2', 'x7_-1', 'x7_0', 'x7_1'], dtype=object)"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "onenc.fit(df[['EDUCATION', 'MARRIAGE',\"S_0\", \"S_2\", \"S_3\", \"S_4\", \"S_5\", \"S_6\"]]).get_feature_names()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "mbhlIlQzZz7c"
   },
   "source": [
    "## Model Selection\n",
    "\n",
    "In this part, we will fit machine learning models learnt in BT2101 to this classification problem, and pick the model that can produce the best results.\n",
    "\n",
    "We will be attempting to fit the following models:\n",
    "- K-Nearest Neighbour\n",
    "- Support Vector Machine\n",
    "- Decision Tree \n",
    "- Naive Bayes Classifier\n",
    "- Logistic Regression\n",
    "- Neural Network\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import *\n",
    "from sklearn.model_selection import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VOB68z_hM1jW"
   },
   "outputs": [],
   "source": [
    "#using holdout sampling for train test split\n",
    "ft = df1.drop(\"Y\", axis = 1)\n",
    "target = df1[\"Y\"]\n",
    "X_train,X_test,y_train,y_test = train_test_split(ft,target,test_size=0.20)\n",
    "#make the results reproducible\n",
    "np.random.seed(2101) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make things easier, we define a get_roc function that will plot an ROC curve for all the models we evaluate, and a confusion matrix function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_roc(model, y_test, X_test, name):\n",
    "    try:\n",
    "        fpr = roc_curve(y_test,model.predict_proba(X_test)[:,1])[0]\n",
    "        tpr = roc_curve(y_test,model.predict_proba(X_test)[:,1])[1]\n",
    "        thresholds = roc_curve(y_test,model.predict_proba(X_test)[:,1])[2]\n",
    "    except:\n",
    "        fpr = roc_curve(y_test,model.predict(X_test))[0]\n",
    "        tpr = roc_curve(y_test,model.predict(X_test))[1]\n",
    "        thresholds = roc_curve(y_test,model.predict(X_test))[2]\n",
    "    plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('Receiver operating characteristic for ' + name)\n",
    "    plt.plot(fpr,tpr,label='ROC curve (AUC = %0.2f)' % (auc(fpr, tpr)))\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    \n",
    "    #find- best threshold\n",
    "    optimal_idx = np.argmax(tpr - fpr)\n",
    "    optimal_threshold = thresholds[optimal_idx]\n",
    "    print(\"Optimal Threshold: \" + str(optimal_threshold))\n",
    "    \n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def confusion(y_test, predictions, name):\n",
    "    conf = pd.crosstab(y_test,predictions, rownames=['Actual'], colnames=['Predicted'])\n",
    "    print(\"Of \" + str(conf[0][1] + conf[1][1]) + \" Defaulters, the \" + name + \" identified \" + str(conf[1][1])) \n",
    "    return conf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation \n",
    "We will select the model based on the model evaluation. The key metrics we will compute are:\n",
    "\n",
    "1. Accuracy\n",
    "2. Recall\n",
    "3. AUROC\n",
    "\n",
    "Because of the nature of a default detection problem, we would like to prioritise **recall** for defaults. \n",
    "This means we will place more importance in correctly identifying a defaulter than avoiding misclassifying a non-defaulter. (Assumming that the bank loses more money when lending to a defaulter than not lending to a non-defaulter)\n",
    "\n",
    "However, simply predicting every data point as a defaulter will give us 100% recall. We have to also consider accuracy and AUROC to get a better idea of how our model performs.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "PEyK8hM1BHj3"
   },
   "source": [
    "### Model 1 - K-Nearest Neighbour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 54
    },
    "colab_type": "code",
    "id": "mgcr1jtzcVpL",
    "outputId": "669a1298-dc36-4dfc-e9fd-298089a515dc"
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-55-1b41a5997a76>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m     \u001b[1;31m#Compute accuracy on the training set\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 16\u001b[1;33m     \u001b[0mtrain_accuracy\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mknn\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     17\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m     \u001b[1;31m#Compute accuracy on the test set\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36mscore\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    355\u001b[0m         \"\"\"\n\u001b[0;32m    356\u001b[0m         \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 357\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    358\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    359\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\neighbors\\classification.py\u001b[0m in \u001b[0;36mpredict\u001b[1;34m(self, X)\u001b[0m\n\u001b[0;32m    147\u001b[0m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'csr'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    148\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 149\u001b[1;33m         \u001b[0mneigh_dist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mneigh_ind\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkneighbors\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    150\u001b[0m         \u001b[0mclasses_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclasses_\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    151\u001b[0m         \u001b[0m_y\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_y\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\sklearn\\neighbors\\base.py\u001b[0m in \u001b[0;36mkneighbors\u001b[1;34m(self, X, n_neighbors, return_distance)\u001b[0m\n\u001b[0;32m    452\u001b[0m                 delayed_query(\n\u001b[0;32m    453\u001b[0m                     self._tree, X[s], n_neighbors, return_distance)\n\u001b[1;32m--> 454\u001b[1;33m                 \u001b[1;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mgen_even_slices\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    455\u001b[0m             )\n\u001b[0;32m    456\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m    932\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    933\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 934\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    935\u001b[0m             \u001b[1;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    936\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    831\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    832\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'supports_timeout'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 833\u001b[1;33m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    834\u001b[0m                 \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    835\u001b[0m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\multiprocessing\\pool.py\u001b[0m in \u001b[0;36mget\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    675\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    676\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 677\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    678\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mready\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    679\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\multiprocessing\\pool.py\u001b[0m in \u001b[0;36mwait\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    672\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    673\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mwait\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 674\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_event\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    675\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    676\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\threading.py\u001b[0m in \u001b[0;36mwait\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    550\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    551\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 552\u001b[1;33m                 \u001b[0msignaled\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    553\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    554\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\threading.py\u001b[0m in \u001b[0;36mwait\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    294\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m    \u001b[1;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    295\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 296\u001b[1;33m                 \u001b[0mwaiter\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    298\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "neighbours = np.arange(1,25)\n",
    "train_accuracy =np.empty(len(neighbours))\n",
    "test_accuracy = np.empty(len(neighbours))\n",
    "                                \n",
    "for i,k in enumerate(neighbours):\n",
    "    #Setup a knn classifier with k neighbors\n",
    "    knn=KNeighborsClassifier(n_neighbors=k,algorithm=\"kd_tree\",n_jobs=-1)\n",
    "    \n",
    "    #Fit the model\n",
    "    knn.fit(X_train,y_train.ravel())\n",
    "    \n",
    "    #Compute accuracy on the training set\n",
    "    train_accuracy[i] = knn.score(X_train, y_train.ravel())\n",
    "    \n",
    "    #Compute accuracy on the test set\n",
    "    test_accuracy[i] = knn.score(X_test, y_test.ravel())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "colab_type": "code",
    "id": "OUhQMYZhPKUS",
    "outputId": "ea071750-1327-4907-8934-c329416798f2"
   },
   "outputs": [],
   "source": [
    "#Generate plot\n",
    "plt.title('k-NN Varying number of neighbors')\n",
    "plt.plot(neighbours, test_accuracy, label='Testing Accuracy')\n",
    "plt.plot(neighbours, train_accuracy, label='Training accuracy')\n",
    "plt.legend()\n",
    "plt.xlabel('Number of neighbors')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 170
    },
    "colab_type": "code",
    "id": "AKG1zgjxPcPE",
    "outputId": "eac2fe99-1db9-4160-e3ff-da85bb9c2459"
   },
   "outputs": [],
   "source": [
    "# best k:\n",
    "idx = np.where(test_accuracy == max(test_accuracy))\n",
    "k = neighbours[idx][0]\n",
    "knn = KNeighborsClassifier(n_neighbors=k,algorithm=\"kd_tree\",n_jobs=-1)\n",
    "knn.fit(X_train,y_train.ravel())\n",
    "print(skmt.classification_report(y_test,knn.predict(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0LZH_AAXUL72"
   },
   "source": [
    "Despite a reasonably high accuracy, the KNN model has very low recall for defaults."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "confusion(y_test, knn.predict(X_test), \"KNN\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "H89tM6NvaN17"
   },
   "source": [
    "### Model 2 - Decision Trees\n",
    "\n",
    "#### Theory:\n",
    "The decision tree algorithm aims to recursively split the data points in the training set until the data points are completely separated or well separated. At each iteration, the tree splits the datasets by the feature(s) that give the maximum reduction in heterogeneity, which is calculated by a heterogeneity index.\n",
    "\n",
    "Below is a binary decision tree that has been split for a few iterations.\n",
    "\n",
    "![image.png](https://elf11.github.io/images/decisionTree.png)\n",
    "\n",
    "Since the target for this project is binary (fraud = yes or no) we will be building a binary decision tree, using the the GINI Index as the Heterogeneity index. The GINI is given by:\n",
    "\n",
    "![image.png](https://miro.medium.com/max/664/1*otdoiyIwxJI-UV0ukkyutw.png)\n",
    "\n",
    "The GINI index measures how heterogenous a single node is (0 being completely homogenous and 1 being heterogenous). For each possible split, we will calculate the *weighted sum* of the GINI indices of the child nodes, and choose the split that results in the maximum information gain. i.e. reduction in the weighted sum of the GINI Index.\n",
    "\n",
    "#### Training\n",
    "We will now construct a simple decision tree using the GINI index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree = DecisionTreeClassifier()\n",
    "tree.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16481\n",
      "           1       1.00      1.00      1.00       892\n",
      "\n",
      "    accuracy                           1.00     17373\n",
      "   macro avg       1.00      1.00      1.00     17373\n",
      "weighted avg       1.00      1.00      1.00     17373\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_train, tree.predict(X_train)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The training set accuracy is 1, which means the datapoints are completely separated by the decision tree. We evaluate on the test set below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Of 205 Defaulters, the Decision Tree (GINI) identified 55\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>3943</td>\n",
       "      <td>196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0    1\n",
       "Actual              \n",
       "0          3943  196\n",
       "1           150   55"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion(y_test, tree.predict(X_test), \"Decision Tree (GINI)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Threshold: 1.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_roc(tree, y_test, X_test, \"Decision Tree (GINI)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.95      0.96      4139\n",
      "           1       0.22      0.27      0.24       205\n",
      "\n",
      "    accuracy                           0.92      4344\n",
      "   macro avg       0.59      0.61      0.60      4344\n",
      "weighted avg       0.93      0.92      0.92      4344\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, tree.predict(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest Classifier\n",
    "\n",
    "#### Theory\n",
    "Random Forest is an ensemble method for the decision tree algorithm. It works by randomly choosing different features and data points to train multiple trees (that is, to form a forest) - and the resulting prediction is decided by the votes from all the trees. \n",
    "\n",
    "Decision Trees are prone to overfitting on the training data, which reduces the performance on the test set. Random Forest mitigates this by training multiple trees. Random Forest is a form of bagging ensemble where the trees are trained concurrently. \n",
    "\n",
    "#### Training\n",
    "To keep things consistent, our Random Forest classifier will also use the GINI Coefficient.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "randf = RandomForestClassifier(n_estimators=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=300,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "randf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     16481\n",
      "           1       1.00      1.00      1.00       892\n",
      "\n",
      "    accuracy                           1.00     17373\n",
      "   macro avg       1.00      1.00      1.00     17373\n",
      "weighted avg       1.00      1.00      1.00     17373\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_train, randf.predict(X_train)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The training set has also been 100% correctly classified by the random forest model. Evaluating with the test set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.99      0.98      4139\n",
      "           1       0.56      0.21      0.30       205\n",
      "\n",
      "    accuracy                           0.95      4344\n",
      "   macro avg       0.76      0.60      0.64      4344\n",
      "weighted avg       0.94      0.95      0.94      4344\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, randf.predict(X_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Of 205 Defaulters, the Decision Tree (Random Forest) identified 43\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>4105</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>162</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0   1\n",
       "Actual             \n",
       "0          4105  34\n",
       "1           162  43"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion(y_test, randf.predict(X_test), \"Decision Tree (Random Forest)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Threshold: 0.016666666666666666\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_roc(randf, y_test, X_test, \"Decision Tree (Random Forest)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The random forest ensemble performs much better than the decision tree alone. The accuracy and AUROC are both superior to the decision tree alone."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gradient Boosted Trees Classifier\n",
    "\n",
    "#### Theory\n",
    "In this part we train a gradient boosted trees classifier using xgBoost. xgBoost is short for \"Extreme Gradient Boosting\". It is a boosting ensemble method for decision trees, which means that the trees are trained consecutively, where each new tree added is trained to correct the error from the previous tree.\n",
    "\n",
    "xgBoost uses the gradient descent algorithm that we learnt in BT2101 at each iteration to maximise the reduction in the error term. (More details? math?)\n",
    " \n",
    "#### Training\n",
    "For consistency our xgBoost ensemble will use n_estimators = 300 as we have done for the random forest ensemble."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingClassifier(criterion='friedman_mse', init=None,\n",
       "                           learning_rate=0.1, loss='deviance', max_depth=4,\n",
       "                           max_features=None, max_leaf_nodes=None,\n",
       "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                           min_samples_leaf=1, min_samples_split=2,\n",
       "                           min_weight_fraction_leaf=0.0, n_estimators=300,\n",
       "                           n_iter_no_change=None, presort='auto',\n",
       "                           random_state=None, subsample=1.0, tol=0.0001,\n",
       "                           validation_fraction=0.1, verbose=0,\n",
       "                           warm_start=False)"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "xgb = GradientBoostingClassifier(n_estimators=300, max_depth = 4)\n",
    "xgb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      1.00      0.99     16481\n",
      "           1       0.98      0.52      0.68       892\n",
      "\n",
      "    accuracy                           0.98     17373\n",
      "   macro avg       0.98      0.76      0.84     17373\n",
      "weighted avg       0.98      0.98      0.97     17373\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_train, xgb.predict(X_train)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We observe that the xgBoost ensemble did not fully separate the data in the training set. (The default maximum depth is 3, so that might be a factor). Evaluating on the test set,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.99      0.98      4139\n",
      "           1       0.54      0.20      0.30       205\n",
      "\n",
      "    accuracy                           0.95      4344\n",
      "   macro avg       0.75      0.60      0.64      4344\n",
      "weighted avg       0.94      0.95      0.94      4344\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, xgb.predict(X_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Threshold: 0.009345018666271007\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "get_roc(xgb, y_test, X_test, \"Decision Tree (XGBoost)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Of 205 Defaulters, the Decision Tree (Gradient Boosted Trees) identified 42\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>4103</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>163</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0   1\n",
       "Actual             \n",
       "0          4103  36\n",
       "1           163  42"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion(y_test, xgb.predict(X_test), \"Decision Tree (Gradient Boosted Trees)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the accuracy and AUROC, we observe that the XGBoost performs similarly to the random forest ensemble. It has a slight bump in AUROC at 0.76, but the accuracy is the same."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 3 - Logistic Regression\n",
    "\n",
    "#### Theory\n",
    "Logistic regression is a regression technnique used to predict binary target variables. It works on the same principles as a linear regression model. \n",
    "\n",
    "Our binary target (default vs non-default) can be expressed in terms of odds of defaulting, which is the ratio of the probability of default and probability of non-default. \n",
    "\n",
    "In the logistic regression model, we log the odds (log-odds) and equate it to a weighted sum of regressors.\n",
    "\n",
    "![image.png](https://wikimedia.org/api/rest_v1/media/math/render/svg/4a5e86f014eb1f0744e280eb0d68485cb8c0a6c3)\n",
    "\n",
    "We then find weights for the regressors that best fits the data. Since the binary target (default or not) follows a bernoulli distribution, each data point has the following probability distribution function:\n",
    "\n",
    "![image.png](https://wikimedia.org/api/rest_v1/media/math/render/svg/614e0c64d59f0ff2e926deafcb2de6e502394fac)\n",
    "\n",
    "We would like to update p for each data point such that the log product (joint probability) of the above function for all data points is maximised. In other words, we are maximising the log-likelihood function.\n",
    "\n",
    "The logistic regression equation produces a \"squashed\" curve like the one below. We then pick a cutoff value for the y axis to classify a data point as 0 (non-default) or 1 (default).\n",
    "\n",
    "![image.png](https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Logistic-curve.svg/1280px-Logistic-curve.svg.png)\n",
    "\n",
    "\n",
    "#### Training\n",
    "We will adopt a top-down approach for training our logistic regression model, i.e. include all regressors first and then remove the most insignificant ones at each iteration to achieve the best fit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.126236\n",
      "         Iterations: 35\n"
     ]
    },
    {
     "ename": "LinAlgError",
     "evalue": "Singular matrix",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mLinAlgError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-77-a8870ecb94b7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mglm\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mLogit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mglm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\statsmodels\\discrete\\discrete_model.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, start_params, method, maxiter, full_output, disp, callback, **kwargs)\u001b[0m\n\u001b[0;32m   1900\u001b[0m         bnryfit = super(Logit, self).fit(start_params=start_params,\n\u001b[0;32m   1901\u001b[0m                 \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmaxiter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmaxiter\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfull_output\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfull_output\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1902\u001b[1;33m                 disp=disp, callback=callback, **kwargs)\n\u001b[0m\u001b[0;32m   1903\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1904\u001b[0m         \u001b[0mdiscretefit\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mLogitResults\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbnryfit\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\statsmodels\\discrete\\discrete_model.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, start_params, method, maxiter, full_output, disp, callback, **kwargs)\u001b[0m\n\u001b[0;32m    215\u001b[0m         mlefit = super(DiscreteModel, self).fit(start_params=start_params,\n\u001b[0;32m    216\u001b[0m                 \u001b[0mmethod\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmaxiter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mmaxiter\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfull_output\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mfull_output\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 217\u001b[1;33m                 disp=disp, callback=callback, **kwargs)\n\u001b[0m\u001b[0;32m    218\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    219\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mmlefit\u001b[0m \u001b[1;31m# up to subclasses to wrap results\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, start_params, method, maxiter, full_output, disp, fargs, callback, retall, skip_hessian, **kwargs)\u001b[0m\n\u001b[0;32m    475\u001b[0m             \u001b[0mHinv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcov_params_func\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxopt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mretvals\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    476\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'newton'\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mfull_output\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 477\u001b[1;33m             \u001b[0mHinv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mretvals\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Hessian'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m/\u001b[0m \u001b[0mnobs\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    478\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mskip_hessian\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    479\u001b[0m             \u001b[0mH\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhessian\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mxopt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\linalg\\linalg.py\u001b[0m in \u001b[0;36minv\u001b[1;34m(a)\u001b[0m\n\u001b[0;32m    549\u001b[0m     \u001b[0msignature\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'D->D'\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0misComplexType\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mt\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32melse\u001b[0m \u001b[1;34m'd->d'\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    550\u001b[0m     \u001b[0mextobj\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_linalg_error_extobj\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_raise_linalgerror_singular\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 551\u001b[1;33m     \u001b[0mainv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_umath_linalg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msignature\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0msignature\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mextobj\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mextobj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    552\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mwrap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mainv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult_t\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    553\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\numpy\\linalg\\linalg.py\u001b[0m in \u001b[0;36m_raise_linalgerror_singular\u001b[1;34m(err, flag)\u001b[0m\n\u001b[0;32m     95\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     96\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0m_raise_linalgerror_singular\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0merr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflag\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 97\u001b[1;33m     \u001b[1;32mraise\u001b[0m \u001b[0mLinAlgError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Singular matrix\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     98\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     99\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0m_raise_linalgerror_nonposdef\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0merr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mflag\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mLinAlgError\u001b[0m: Singular matrix"
     ]
    }
   ],
   "source": [
    "glm = sm.Logit(y_train,X_train).fit()\n",
    "glm.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(classification_report(y_train,list(glm.predict(X_train)>0.5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'glm' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-75-68f491b1d29d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mglm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m>\u001b[0m\u001b[1;36m0.5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'glm' is not defined"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,list(glm.predict(X_test)>0.5)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The logisitc model with all features performs quite well on both the train and test set with an accuracy of 0.81. We will now try removing all the insignificant features to see how that affects the model performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove all insignificant attributes\n",
    "sig = glm.pvalues[glm.pvalues < 0.05]\n",
    "glm_2 = sm.Logit(y_train,X_train[sig.index]).fit()\n",
    "glm_2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(classification_report(y_train,list(glm_2.predict(X_train[sig.index])>0.5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(classification_report(y_test,list(glm_2.predict(X_test[sig.index])>0.5)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since there is not much change to the model performance on both the train and test set when we reduce the features, we will use the reduced logistic regression model from this point onwards (Principle of Parsimony). \n",
    "\n",
    "We now Calculate the AUROC for the train set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "get_roc(glm_2, y_train, X_train[sig.index], \"Logistic Regression\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the optimal cut off was found to be 0.276 using the training data, we will use that as our cut off for our evaluation of the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "print(classification_report(y_test,list(glm_2.predict(X_test[sig.index])>0.276)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unfortunately, the training accuracy has gone down when we used the optimal cutoff. However, accuracy may be misleading in a dataset like ours where most of the targets are non-defaults. The recall here is more important since we prioritise detecting defaulters at the expense of misclassifying non-defaulters. Looking at recall, our lower cutoff is able to correctly catch more defaulters.\n",
    "\n",
    "\n",
    "Calculate the confusion matrices for both cut offs to better compare their performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "confusion(y_test,glm_2.predict(X_test[sig.index])>0.276, \"Logistic Regression\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "confusion(y_test,glm_2.predict(X_test[sig.index])>0.5, \"Logistic Regression\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is evident that the cutoff of 0.276 is better able to detect defualts, with 688 detected in the test set for 0.276 but only 346 detected for 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "get_roc(glm_2, y_test, X_test[sig.index], \"Logistic Regression\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "iCxBcin11EI8"
   },
   "source": [
    "### Model x - Support Vector Machine\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standardizing attributes to prep for PCA\n",
    "SVM is computationally expensive for large datasets like ours. Therefore, we would like to reduce the dimensionality of our dataset before training an SVM on it. This can be done through Principle Component Analysis (PCA). The idea would be to reduce the number of features without loss of information."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using training set to determine parameters of standardization\n",
    "apply the parameters to standardize all attributes in training and test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3LfxfeMZ1Kol"
   },
   "outputs": [],
   "source": [
    "#Standardising data\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "# Standardizing the features\n",
    "names = X_train.columns\n",
    "scalar = StandardScaler()\n",
    "scalar = scalar.fit(X_train)\n",
    "X_train_standardize = scalar.transform(X_train)\n",
    "X_train_standardize = pd.DataFrame(data = X_train_standardize, columns = names)\n",
    "X_test_standardize = scalar.transform(X_test)\n",
    "X_test_standardize = pd.DataFrame(data = X_test_standardize, columns = names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#check if numerical attributes are normailised with mean = 0 and sd = 1\n",
    "X_train_standardize.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perfrom initial PCA for 2 components for visualization\n",
    "giving 2 pca components, we will visualize the information retained after performing 2 pca components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#perform pca\n",
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(n_components=2)\n",
    "principalComponents =  pca.fit_transform(X_train_standardize)\n",
    "principalDf = pd.DataFrame(data = principalComponents\n",
    "             , columns = ['principal component 1', 'principal component 2'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#amount of information each principal component holds after projecting the data to a lower dimensional subspace.\n",
    "print('Explained variation per principal component: {}'.format(pca.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shows that the information of principal component 1 retained is 28.4% and principal component 2 retained is 17.8%, both of which is quite low"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#visualizing pca\n",
    "pca_visualize_df = pd.concat([principalDf, y_train], axis = 1)\n",
    "fig = plt.figure(figsize = (8,8))\n",
    "ax = fig.add_subplot(1,1,1) \n",
    "ax.set_xlabel('Principal Component 1', fontsize = 15)\n",
    "ax.set_ylabel('Principal Component 2', fontsize = 15)\n",
    "ax.set_title('2 component PCA', fontsize = 20)\n",
    "targets = [1,0]\n",
    "colors = ['r', 'g']\n",
    "for target, color in zip(targets,colors):\n",
    "    indicesToKeep = pca_visualize_df['Y'] == target\n",
    "    ax.scatter(pca_visualize_df.loc[indicesToKeep, 'principal component 1']\n",
    "               , pca_visualize_df.loc[indicesToKeep, 'principal component 2']\n",
    "               , c = color\n",
    "               , s = 50)\n",
    "ax.legend(targets)\n",
    "ax.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, there is no clear linear separation for the target attributes for 2 pca components, justifying the above percentages. Nonetherless, we will continue to use PCA by finding the  optimmum number of PC components which retains 90% of information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Perform PCA to retain 90% of information\n",
    "perform PCA to reduce components so we can run SVM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#setting pca threshold to 90%\n",
    "pca = PCA(0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca.fit(X_train_standardize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get number of components after pca\n",
    "print('No. of components before pca: {}'.format(len(X_train.columns)))\n",
    "print('No. of components after pca: {}'.format(pca.n_components_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the number of components is reduced from 23 components to 13 components"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#perform pca on training and test attributes\n",
    "X_train_pca = pca.transform(X_train_standardize)\n",
    "X_test_pca = pca.transform(X_test_standardize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Apply SVM model\n",
    "Next, we will used the reduced attributes train set to train our SVM model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we train our SVM model without parameter tuning\n",
    "nor pca reduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import svm\n",
    "#train svm model without standardization and no parameter tuning\n",
    "clf_original = svm.SVC(kernel = 'rbf', probability = True)\n",
    "clf_original.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot roc for svm\n",
    "get_roc(clf_original, y_test, X_test, \"SVM original data RBF kernal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#confusion matrix\n",
    "confusion(y_test,clf_original.predict(X_test), \"SVM original data RBF kernal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evidently, SVM model fit with no tuning or feature reduction with RBF kernal shows low performance. Now, we will fit SVM model with reduced standardized features and access accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "note that the default values of gamma = 1/13 and c= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train svm model with feature reduction and no parameter tuning\n",
    "clf_reduced = svm.SVC(kernel = 'rbf', probability = True, gamma = 1/13, C = 1)\n",
    "clf_reduced.fit(X_train_pca, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot roc for svm\n",
    "get_roc(clf_reduced, y_test, X_test_pca, \n",
    "        \"SVM reduced features no tuning RBF kernal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#confusion matrix\n",
    "confusion(y_test,clf_reduced.predict(X_test_pca), \"SVM reduced features no tuning RBF kernal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, by reducing features through pca, the AUROC curve improves, suggesting a better prediction model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now try to find best parameters for SVM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "def svc_param_selection(X, y, nfolds):\n",
    "    Cs = [0.001, 0.01, 0.1, 1, 10]\n",
    "    gammas = [0.001, 0.01, 0.1, 1,10]\n",
    "    param_grid = {'C': Cs, 'gamma' : gammas}\n",
    "    grid_search = GridSearchCV(svm.SVC(kernel='rbf'), param_grid, cv=nfolds)\n",
    "    grid_search.fit(X, y)\n",
    "    grid_search.best_params_\n",
    "    return grid_search.best_params_\n",
    "svc_param_selection(X_train_pca, y_train,10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train svm model with feature reduction and cost = 10, gamma = 0.01\n",
    "clf_reduced_tuned = svm.SVC(kernel = 'rbf', probability = True, C= 10, gamma = 0.01)\n",
    "clf_reduced_tuned.fit(X_train_pca, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "get_roc(clf_reduced_tuned, y_test, X_test_pca, \n",
    "        \"SVM reduced features and tuning RBF kernal\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#confusion matrix\n",
    "confusion(y_test,clf_reduced_tuned.predict(X_test_pca), \"SVM reduced features and tuning RBF kernal\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this, we can conclude that fitting SVM model with PCA-reduced features but no parameter tuning is most accurate based on Recall value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Thus, fitting an SVM with PCA-reduced features with default gamma = 1/13 and C = 1 with kernal = 'rbf' is the best model. However, this is only for rbf kernal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "BT2101 disrudy ",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
